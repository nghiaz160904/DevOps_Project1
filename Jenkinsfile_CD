pipeline {
    agent any

    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch to deploy (e.g., main, RC, or feature branch)')
        string(name: 'SERVICE', defaultValue: '', description: 'Service to deploy (e.g., customers-service, vets-service)')
        string(name: 'COMMIT_ID', defaultValue: '', description: 'Commit ID for the Docker image (leave empty for latest)')
    }

    environment {
        DOCKER_IMAGE = 'nghiax1609/spring-petclinic-microservices'
    }

    
    stages {
        stage('Start Minikube') {
            steps {
                script {
                    echo "Starting Minikube..."
                    sh 'minikube start --memory=4096 --cpus=2'
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    def domain = ''
                    if (params.BRANCH == 'main') {
                        domain = 'dev.spring-petclinic.com'
                    } else if (params.BRANCH == 'RC') {
                        domain = 'rc.spring-petclinic.com'
                    } else {
                        domain = "${params.COMMIT_ID}.dev.spring-petclinic.com"
                    }

                    def imageTag = params.COMMIT_ID ?: 'latest'
                    def service = params.SERVICE

                    echo "Deploying ${service} from branch ${params.BRANCH} with image tag ${imageTag} to ${domain}"

                    // Apply Kubernetes deployment
                    sh """
                    kubectl set image deployment/${service} ${service}=${DOCKER_IMAGE}-${service}:${imageTag} -n spring-petclinic
                    kubectl rollout restart deployment/${service} -n spring-petclinic
                    """

                    // Create or update ingress rule
                    sh """
                    kubectl apply -f - <<EOF
                    apiVersion: networking.k8s.io/v1
                    kind: Ingress
                    metadata:
                      name: ${service}-ingress
                      namespace: spring-petclinic
                      annotations:
                        nginx.ingress.kubernetes.io/rewrite-target: /
                    spec:
                      rules:
                      - host: ${domain}
                        http:
                          paths:
                          - path: /
                            pathType: Prefix
                            backend:
                              service:
                                name: ${service}
                                port:
                                  number: 8080
                    EOF
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Deployment successful! Access the service at http://${params.BRANCH == 'main' ? 'dev.spring-petclinic.com' : params.BRANCH == 'RC' ? 'rc.spring-petclinic.com' : params.COMMIT_ID + '.dev.spring-petclinic.com'}"
        }
        failure {
            echo "Deployment failed. Check logs for details."
        }
    }
}