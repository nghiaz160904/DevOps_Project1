pipeline {
    agent any

    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch to deploy (e.g., main, RC, or feature branch)')
        string(name: 'SERVICE', defaultValue: '', description: 'Service to deploy (e.g., customers-service, vets-service)')
        string(name: 'COMMIT_ID', defaultValue: '', description: 'Commit ID for the Docker image (leave empty for latest)')
    }

    environment {
        DOCKER_IMAGE = 'nghiax1609/spring-petclinic'
    }

    stages {

        stage('Deploy Helm Charts') {
            steps {
                script {
                    echo "Cleaning up old resources..."
                    sh """
                    kubectl delete all --all -n spring-petclinic --ignore-not-found=true
                    """

                    echo "Deploying ingress-nginx..."
                    sh """
                    helm upgrade --install ingress-nginx ingress-nginx \
                        --repo https://kubernetes.github.io/ingress-nginx \
                        --namespace ingress-nginx --create-namespace \
                        --set controller.service.type=LoadBalancer
                    """

                    echo "Deploying Spring PetClinic Helm Chart..."
                    sh """
                    helm upgrade --install spring-petclinic ./spring-petclinic \
                    --namespace spring-petclinic --create-namespace \
                    --set ingress.enabled=true \
                    --set ingress.hosts[0].host=dev.spring-petclinic.com \
                    --set ingress.hosts[0].paths[0].path="/" \
                    --set ingress.hosts[0].paths[0].pathType=Prefix \
                    --force \
                    """
                }
            }
        }

        stage('Update Images') {
            steps {
                script {
                    // Tạo namespace nếu chưa tồn tại
                    sh """
                    kubectl get namespace spring-petclinic || kubectl create namespace spring-petclinic
                    """

                    // Danh sách các services trong ứng dụng Spring PetClinic
                    def services = [
                        'api-gateway',
                        'admin-server',
                        'customers-service',
                        'vets-service',
                        'visits-service',
                        'genai-service',
                        'config-server',
                        'discovery-server'
                    ]
                    def servicePorts = [
                        'api-gateway': 8080,
                        'admin-server': 9090,
                        'customers-service': 8081,
                        'vets-service': 8082,
                        'visits-service': 8083,
                        'genai-service': 8084,
                        'config-server': 8888,
                        'discovery-server': 8761
                    ]

                    // Kiểm tra và lấy tag của image
                    def imageTag = params.COMMIT_ID ?: sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                    if (params.SERVICE) {
                        echo "Deploying specific service: ${params.SERVICE}"
                        services = [params.SERVICE]
                    } else {
                        echo "Deploying all services"
                    }
                    for (service in services) {
                        echo "Ensuring deployment and service for ${service} exist..."

                        // Kiểm tra và tạo Deployment nếu chưa tồn tại
                        sh """
                        kubectl get deployment ${service} -n spring-petclinic || kubectl create deployment ${service} --image=${DOCKER_IMAGE}-${service}:${imageTag} -n spring-petclinic
                        """

                        // Kiểm tra và tạo Service nếu chưa tồn tại
                        sh """
                        kubectl get service ${service} -n spring-petclinic || kubectl expose deployment ${service} --type=ClusterIP --port=${servicePorts[service]} -n spring-petclinic
                        """

                        echo "Updating image for ${service} with tag ${imageTag}"

                        // Update image for the service
                        sh """
                        kubectl set image deployment/${service} ${service}=${DOCKER_IMAGE}-${service}:${imageTag} -n spring-petclinic
                        kubectl rollout restart deployment/${service} -n spring-petclinic
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Deployment successful! Access the service at http://${params.BRANCH == 'main' ? 'dev.spring-petclinic.com' : params.BRANCH == 'RC' ? 'rc.spring-petclinic.com' : params.COMMIT_ID + '.dev.spring-petclinic.com'}"
        }
        failure {
            echo "Deployment failed. Check logs for details."
        }
    }
}