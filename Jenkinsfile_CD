pipeline {
    agent any
    
    parameters {
        string(name: 'api_gateway', defaultValue: 'latest', description: '')
        string(name: 'customers_service', defaultValue: 'latest', description: '')
        string(name: 'vets_service', defaultValue: 'latest', description: '')
        string(name: 'visits_service', defaultValue: 'latest', description: '')
        string(name: 'admin_server', defaultValue: 'latest', description: '')
        string(name: 'discovery_server', defaultValue: 'latest', description: '')
        string(name: 'config_server', defaultValue: 'latest', description: '')
        string(name: 'genai_service', defaultValue: 'latest', description: '')
    }
    
    environment {
        NAMESPACE = "spring-petclinic-${env.BUILD_NUMBER}"
        DOCKER_REGISTRY = 'nghiax1609/'
    }
    
    stages {
        stage('Checkout Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/nghiaz160904/DevOps_Project1.git'
            }
        }

        stage('Get Commit IDs') {
            steps {
                script {

                    env.API_GATEWAY_TAG = getCommitId('spring-petclinic-api-gateway', params.api_gateway)
    
                    env.CUSTOMERS_SERVICE_TAG = getCommitId('spring-petclinic-customers-service', params.customers_service)

                    env.VETS_SERVICE_TAG = getCommitId('spring-petclinic-vets-service', params.vets_service)
                    
                    env.VISITS_SERVICE_TAG = getCommitId('spring-petclinic-visits-service', params.visits_service)

                    env.ADMIN_SERVER_TAG = getCommitId('spring-petclinic-admin-server', params.admin_server)

                    env.DISCOVERY_SERVER_TAG = getCommitId('spring-petclinic-discovery-server', params.discovery_server)
                    
                    env.CONFIG_SERVER_TAG = getCommitId('spring-petclinic-config-server', params.config_server)
                
                    env.GENAI_SERVICE_TAG = getCommitId('spring-petclinic-genai-service', params.genai_service)
                }
            }
        }

        stage('Create Namespace') {
            steps {
                sh "kubectl create namespace ${NAMESPACE}"
                echo "Created namespace: ${NAMESPACE}"
            }
        }
        
        stage('Update Helm Values') {
            steps {
                script {
                    // update spring-petclinic namespace
                    sh "sed -i 's/^namespace:.*/namespace: ${NAMESPACE}/' ./spring-petclinic/values.yaml"
                }
            }
        }

        stage('Deploy Services') {
            steps {
                script {
                    sh """
                    helm upgrade --install petclinic ./spring-petclinic -n ${NAMESPACE} --create-namespace \\
                        --set namespace=${NAMESPACE} \\
                        --set services.api-gateway.tag=${API_GATEWAY_TAG} \\
                        --set services.customers-service.tag=${CUSTOMERS_SERVICE_TAG} \\
                        --set services.vets-service.tag=${VETS_SERVICE_TAG} \\
                        --set services.visits-service.tag=${VISITS_SERVICE_TAG} \\
                        --set services.admin-server.tag=${ADMIN_SERVER_TAG} \\
                        --set services.discovery-server.tag=${DISCOVERY_SERVER_TAG} \\
                        --set services.config-server.tag=${CONFIG_SERVER_TAG} \\
                        --set services.genai-service.tag=${GENAI_SERVICE_TAG}
                    """
                }
            }
        }

        stage('Show Delete Link') {
            steps {
                echo "Current build: ${env.BUILD_URL}"
                echo "Delete deployment: ${env.JENKINS_URL}job/delete-deployment/buildWithParameters?BUILD_NUMBER_TO_DELETE=${env.BUILD_NUMBER}"
            }
        }
    }
    
    post {
        failure {
            echo "Deployment failed. Cleaning up namespace ${NAMESPACE}"
            sh "kubectl delete namespace ${NAMESPACE} || true"
        }
    }
}

def getCommitId(serviceName, branch) {
    def cleanBranch = branch.trim()
    def tag = ""

    // If branch is "latest", use it directly as the tag
    if (cleanBranch == "latest") {
        tag = "latest"
        echo "Service: ${serviceName}, Branch: ${cleanBranch}, Using tag: ${tag} (direct)"
    } else {
        // Fetch commit ID for actual branches
        def commitId = sh(
            script: "git ls-remote https://github.com/nghiaz160904/DevOps_Project1.git refs/heads/${cleanBranch} | cut -f 1 | head -n 1",
            returnStdout: true
        ).trim().take(7)

        // Handle empty commitId (invalid branch)
        if (!commitId) {
            error "No commit found for branch '${cleanBranch}' in repo. Please check the branch name."
        }

        // Set tag based on branch
        if (cleanBranch == "main") {
            tag = "latest"
        } else {
            tag = "${commitId}"
        }

        echo "Service: ${serviceName}, Branch: ${cleanBranch}, Commit ID: ${commitId}, Tag: ${tag}"
    }

    return tag
}